# CORAL-X Multi-Generation Scaling Configuration
# Optimized for large-scale evolution experiments with comprehensive logging

# Evolution parameters
evo:
  rank_candidates: [4, 8, 16, 32]  # Heavy genes: LoRA rank options
  alpha_range: [16.0, 64.0]        # Heavy genes: LoRA alpha range
  dropout_range: [0.05, 0.3]       # Heavy genes: LoRA dropout range

# Execution settings - Scaling optimized
execution:
  population_size: 8                # Larger population for better evolution
  generations: 5                    # Multi-generation test
  output_dir: "./coralx_scale_results"  # Separate output for scaling tests
  use_modal: true                    # Enable Modal for distributed processing

# Experiment configuration - CodeLlama + QuixBugs
experiment:
  name: "coral_x_scale_test"         # Experiment name
  target: "quixbugs_codellama"       # Plugin to use
  dataset:
    path: "../quixbugs_dataset"      # Path to QuixBugs dataset
  model:
    name: "codellama/CodeLlama-7b-Python-hf"  # Base CodeLlama checkpoint

# Infrastructure settings - Optimized for scaling
infra:
  executor: "modal"                 # Modal for distributed execution
  resources:
    cpu: 4                          # More CPU cores
    memory: 8192                    # More memory for larger populations
    gpu: "A10G"                     # GPU type (for modal) - A10G for consistency
    timeout: 2400                   # Longer timeout for multi-generation runs
    max_workers: 8                  # More workers for parallel execution

# Clone-Cache configuration
cache:
  artifacts_dir: "./artifacts"      # Directory for cached LoRA adapters
  base_checkpoint: "codellama/CodeLlama-7b-Python-hf"  # Base model
  metadata: true                    # Save cache metadata

# Threshold Gate configuration with Ïƒ-wave dynamics
threshold:
  base_thresholds:                  # Starting thresholds (generation 0) - lenient for scaling
    bugfix: 0.2                     # Bug fixing capability (very lenient)
    style: 0.6                      # Code style score (lenient)
    security: 0.7                   # Security compliance (lenient)
    runtime: 0.5                    # Runtime efficiency (lenient)
  max_thresholds:                   # Final thresholds (generation 40)
    bugfix: 0.9                     # Target bug fixing capability
    style: 0.97                     # Target style score
    security: 1.0                   # Perfect security compliance
    runtime: 0.9                    # Target runtime efficiency
  schedule: "sigmoid"               # Threshold progression: linear | sqrt | sigmoid

# Enhanced logging configuration
logging:
  detailed_prompts: true            # Show full CodeLlama prompts
  detailed_responses: true          # Show full CodeLlama responses  
  detailed_test_results: true       # Show comprehensive test execution details
  show_extracted_code: true         # Show extracted function code
  show_test_cases: true             # Show actual test cases
  timing_breakdown: true            # Show detailed timing for each step
  memory_tracking: true             # Track GPU memory usage

# Random seed for reproducibility
seed: 42

# CORAL-X scaling optimization comments:
# - Larger population (8) for better genetic diversity
# - Multi-generation (5) to test evolution dynamics
# - Enhanced logging for debugging and analysis
# - Lenient thresholds to allow more genomes to survive early generations
# - Optimized resource allocation for parallel processing
# - Persistent model caching to avoid repeated downloads
# - Comprehensive timing and memory tracking for performance analysis 