[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "coralx"
version = "0.1.0"
description = "Functional CORAL Evolution System - Cellular Automata + LoRA for Code Generation"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "CoralX Team", email = "team@coralx.dev"}
]
keywords = ["evolution", "cellular-automata", "lora", "code-generation", "genetic-algorithm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
]

dependencies = [
    "numpy>=1.20.0,<2.0.0",
    "scipy>=1.7.0",
    "pyyaml>=5.4.0",
    "modal>=0.50.0",
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "peft>=0.7.0",
    "accelerate>=0.25.0",
    "datasets>=2.14.0",
    "unsloth>=2023.11",
    "rich>=13.0.0",
    "scikit-learn>=1.0.0",
    "psutil>=5.8.0",
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "pytest>=7.4.0",
    "flake8>=6.1.0",
    "bandit>=1.7.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
coralx = "core.cli.main:main"

[project.urls]
Homepage = "https://github.com/coralx/coralx"
Repository = "https://github.com/coralx/coralx"
Documentation = "https://coralx.readthedocs.io"
"Bug Tracker" = "https://github.com/coralx/coralx/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "infra*", "plugins*"]
exclude = ["tests*", "docs*", "cache*", "results*", "runs*", "logs*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | cache
  | results
  | runs
  | logs
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "peft.*",
    "accelerate.*",
    "datasets.*",
    "unsloth.*",
    "modal.*",
    "sklearn.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "infra", "plugins"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/cache/*",
    "*/results/*",
    "*/runs/*",
    "*/logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
